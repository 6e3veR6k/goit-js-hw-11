{"version":3,"sources":["js/data-service.js","js/gallery.js","index.js"],"names":["BASE_URL","API_KEY","getImages","searchText","pageNumber","imgPerPage","path","createPath","response","fetch","responseObject","json","queryObject","URLSearchParams","key","q","image_type","orientation","safesearch","page","per_page","createGalleryLayout","galleryData","galleryList","map","imgData","createGalleryCardLayout","join","webformatURL","largeImageURL","tags","likes","views","comments","downloads","icons","ref","searchForm","document","getElementById","gallery","querySelector","options","onSearchButtonClick","e","preventDefault","innerHTML","elements","searchQuery","value","renderLayout","getImagesData","responseObj","hits","layout","insertAdjacentHTML","addEventListener","infScroll","InfiniteScroll","pageIndex","append","responseBody","history","on","body"],"mappings":";AA4BC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAAA,QAAA,UAAA,EA5BD,MAAMA,EAAW,2BACXC,EAAU,qCAET,eAAeC,EAAUC,EAAYC,EAAYC,GAChDC,MAAAA,EAAOC,EAAWJ,EAAYC,EAAYC,GAC1CG,QAAiBC,MAAMH,GAEtBI,aADsBF,EAASG,OAIjC,SAASJ,EAAWJ,EAAYC,EAAYC,GAO3CO,MAAAA,EAAc,IAAIC,gBAAgB,CACtCC,IAAKb,EACLc,EAAGZ,EACHa,WAAY,QACZC,YAAa,aACbC,YAAY,EACZC,KAAMf,EACNgB,SAAUf,IAGJ,SAAEL,KAAYY;;;;ACwCvB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EAnED,IAAA,EAAA,EAAA,QAAA,wBAmEC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAjEM,SAASS,EAAoBC,GAG3BC,OAFaD,EAAYE,IAAIC,GAAWC,EAAwBD,IAEpDE,KAAK,IAG1B,SAASD,EAQN,GAR8B,IAAA,aAC/BE,EAD+B,cAE/BC,EAF+B,KAG/BC,EAH+B,MAI/BC,EAJ+B,MAK/BC,EAL+B,SAM/BC,EAN+B,UAO/BC,GACC,EASO,+JAIeN,8BACAE,uNAOgDC,wFAEzBI,EAAM,oFAEfJ,6GAGkCC,wFAEzBG,EAAM,oFAEfH,mHAGwCC,2FAE5BE,EAAM,uFAElBF,iHAGsCC,4FAEzBC,EAAM,wFAEnBD;;;;;;ACXvC,aAnDA,IAAA,EAAA,QAAA,qBACA,EAAA,QAAA,gBAEA,QAAA,yCACA,QAAA,oBAEA,MAAME,EAAM,CACVC,WAAYC,SAASC,eAAe,eACpCC,QAASF,SAASG,cAAc,aAG5BC,EAAU,CACdvC,WAAY,GACZC,WAAY,EACZC,WAAY,IAKd,eAAesC,EAAoBC,GACjCA,EAAEC,iBACFT,EAAII,QAAQM,UAAY,GACxBJ,EAAQvC,WAAaiC,EAAIC,WAAWU,SAASC,YAAYC,MAIzDC,QADsBC,EAAcT,EAAQvC,WAAYuC,EAAQtC,WAAYsC,EAAQrC,aAItF,eAAe8C,EAAchD,EAAYC,EAAYC,GAC7C+C,MAAAA,QAAoB,EAAUjD,EAAAA,WAAAA,EAAYC,EAAYC,GAErDoB,aADe2B,EAAYC,KAIpC,SAASH,EAAazB,GACd6B,MAAAA,GAAS,EAAoB7B,EAAAA,qBAAAA,GACnCW,EAAII,QAAQe,mBAAmB,YAAaD,GApB9ClB,EAAIC,WAAWmB,iBAAiB,SAAUb,GAuB1C,MAAMc,EAAY,IAAIC,eAAetB,EAAII,QAAS,CAEhDlC,KAAM,WACG,OAAA,EAAWoC,EAAAA,YAAAA,EAAQvC,WAAY,KAAKwD,UAAWjB,EAAQrC,aAEhEuD,OAAQ,gBACRC,aAAc,OACdC,SAAS,IAIXL,EAAUM,GAAG,OAAQ,SAASC","file":"src.ff49bff7.js","sourceRoot":"../src","sourcesContent":["const BASE_URL = 'https://pixabay.com/api/';\nconst API_KEY = '26514918-51b3293439e1c4834d5cf3fc1';\n\nexport async function getImages(searchText, pageNumber, imgPerPage) {\n  const path = createPath(searchText, pageNumber, imgPerPage);\n  const response = await fetch(path);\n  const responseObject = await response.json();\n  return responseObject;\n}\n\nexport function createPath(searchText, pageNumber, imgPerPage) {\n  // key - твой уникальный ключ доступа к API.\n  // q - термин для поиска. То, что будет вводить пользователь.\n  // image_type - тип изображения. Мы хотим только фотографии, поэтому задай значение photo.\n  // orientation - ориентация фотографии. Задай значение horizontal.\n  // safesearch - фильтр по возрасту. Задай значение true.\n\n  const queryObject = new URLSearchParams({\n    key: API_KEY,\n    q: searchText,\n    image_type: 'photo',\n    orientation: 'horizontal',\n    safesearch: true,\n    page: pageNumber,\n    per_page: imgPerPage,\n  });\n\n  return `${BASE_URL}?${queryObject}`;\n}\n","import icons from '../images/icons.svg';\n\nexport function createGalleryLayout(galleryData) {\n  const galleryList = galleryData.map(imgData => createGalleryCardLayout(imgData));\n\n  return galleryList.join('');\n}\n\nfunction createGalleryCardLayout({\n  webformatURL,\n  largeImageURL,\n  tags,\n  likes,\n  views,\n  comments,\n  downloads,\n}) {\n  // webformatURL - ссылка на маленькое изображение для списка карточек.\n  // largeImageURL - ссылка на большое изображение.\n  // tags - строка с описанием изображения. Подойдет для атрибута alt.\n  // likes - количество лайков.\n  // views - количество просмотров.\n  // comments - количество комментариев.\n  // downloads - количество загрузок.\n\n  return `<li class=\"gallery-item\">\n        <div class=\"photo-card\">\n            <div class=\"card-img-wrapper\">\n                <img\n                  src=\"${webformatURL}\"\n                  alt=\"${tags}\"\n                  loading=\"lazy\"\n                  width=\"320\"\n                />\n            </div>\n\n          <div class=\"info\">\n            <button class=\"button button-sm\" type=\"button\" data-likes=\"${likes}\">\n              <svg class=\"icon\">\n                <use class=\"likes-icon\" href=\"${icons}#like\"></use>\n              </svg>\n              <span class=\"img-info\">${likes}</span>\n            </button>\n\n            <button class=\"button button-sm\" type=\"button\" data-views=\"${views}\">\n              <svg class=\"icon\">\n                <use class=\"views-icon\" href=\"${icons}#view\"></use>\n              </svg>\n              <span class=\"img-info\">${views}</span>\n            </button>\n\n            <button class=\"button button-sm ml\" type=\"button\" data-comments=\"${comments}\">\n              <svg class=\"icon\">\n                <use class=\"comments-icon\" href=\"${icons}#comment\"></use>\n              </svg>\n              <span class=\"img-info\">${comments}</span>\n            </button>\n\n            <button class=\"button button-sm\" type=\"button\" data-downloads=\"${downloads}\">\n              <svg class=\"icon\">\n                <use class=\"downloads-icon\" href=\"${icons}#download\"></use>\n              </svg>\n              <span class=\"img-info\">${downloads}</span>\n            </button>\n          </div>\n        </div>\n      </li>`;\n}\n","import { getImages, createPath } from './js/data-service';\nimport { createGalleryLayout } from './js/gallery';\n\nimport 'modern-normalize/modern-normalize.css';\nimport './sass/main.scss';\n\nconst ref = {\n  searchForm: document.getElementById('search-form'),\n  gallery: document.querySelector('.gallery'),\n};\n\nconst options = {\n  searchText: '',\n  pageNumber: 1,\n  imgPerPage: 12,\n};\n\nref.searchForm.addEventListener('submit', onSearchButtonClick);\n\nasync function onSearchButtonClick(e) {\n  e.preventDefault();\n  ref.gallery.innerHTML = '';\n  options.searchText = ref.searchForm.elements.searchQuery.value;\n\n\n  const imgData = await getImagesData(options.searchText, options.pageNumber, options.imgPerPage);\n  renderLayout(imgData);\n}\n\nasync function getImagesData(searchText, pageNumber, imgPerPage) {\n  const responseObj = await getImages(searchText, pageNumber, imgPerPage);\n  const imgData = await responseObj.hits;\n  return imgData;\n}\n\nfunction renderLayout(imgData) {\n  const layout = createGalleryLayout(imgData);\n  ref.gallery.insertAdjacentHTML('beforeend', layout);\n}\n\nconst infScroll = new InfiniteScroll(ref.gallery, {\n  // options\n  path: function () {\n    return createPath(options.searchText, this.pageIndex, options.imgPerPage);\n  },\n  append: '.gallery-item',\n  responseBody: 'json',\n  history: false,\n});\n\n\ninfScroll.on('load', function(body) {\n  \n});\n"]}